@mixin generate-grid($breakpoints) {
  $index: 1;
  $gutter: calc-gutter-percentage($breakpoints);

  @include generate-grid-common-rules($gutter);

  @each $key, $breakpoint in $breakpoints {
    $columns: map-get($breakpoint, columns);
    $gridSize: map-get($breakpoint, size);

    @if $index == 1 {
      @include generate-grid-container($breakpoint, $breakpoints, $gutter);
      @include generate-grid-columns($breakpoint, $key, $gutter);
    } @else {
      $previousBreakpoint: nth(map-keys($breakpoints), $index - 1);
      @include media($previousBreakpoint) {
        @include generate-grid-container($breakpoint, $breakpoints, $gutter);
        @include generate-grid-columns($breakpoint, $key, $gutter);
      };
    }

    @include generate-grid-hide-helper($key, $breakpoints, $index);
    $index: $index + 1;
  }
};

@mixin generate-grid-hide-helper($key, $breakpoints, $index) {
  $numberBreakpoints:  length($breakpoints);
  $previousBreakpoint: nth(map-keys($breakpoints), max(1, $index - 1));
  $mediaQueryConfig: (start: $previousBreakpoint, end: $key);

  @if $index == 1 {
    $mediaQueryConfig: (end: $key);
  } @else if $index == $numberBreakpoints {
    $mediaQueryConfig: (start: $previousBreakpoint);
  }

  @include media($mediaQueryConfig...) {
    .hide-#{$key} {
      display: none;
    }
  };
};

@mixin generate-grid-common-rules($gutter) {
  /* no-flexbox fallback
   *
   * Just add this class to the body and use some
   * lib, like modernizr, to append it
   */
  .container {
    @include flex-direction(row);
    @include flex-wrap(wrap);
    @include flexbox;

    margin: {
      right: auto;
      left: auto;
    }

    padding: {
      right: percentage($gutter / 2);
      left: percentage($gutter / 2);
    }

    width: 100%;

    .no-flexbox & {
      @include clearfix;

      [class*='col-'] {
        float: left;
      }
    }

    /*
     * container--fluid modifier
     */
    &--fluid {
      width: 100%;
      max-width: inherit;
    }

    &--middle-items {
      align-items: center;
    }
  }

  /*
   * Adding flex-shring, flex-wrap, display flex and col-centered helper to columns
   */
  [class*='col-'] {
    @include flex-shrink(0);
    @include flex-wrap(wrap);
    @include flexbox;

    max-width: 100%;

    &.col-centered {
      margin: {
        right: auto;
        left: auto;
      }
    }
  }
};

@mixin generate-grid-columns($breakpoint, $key, $gutter) {
  $columns: map-get($breakpoint, columns);
  $gridSize: map-get($breakpoint, size);

  [class*='col-#{$key}-'] {
    margin-right: percentage($gutter / 2);
    margin-left: percentage($gutter / 2);
  }

  @for $i from 1 through $columns {
    .col-#{$key}-#{$i} {
      width: percentage(($i / $columns) - $gutter);
    }

    .col-push-#{$key}-#{$i} {
      margin-left: percentage(($i / $columns) + $gutter/2);
    }

    .col-offset-#{$key}-#{$i} {
      left: percentage(($i / $columns));
    }
  }
};

@mixin generate-grid-container($breakpoint, $breakpoints, $gutter) {
  $breakpointsLength: length($breakpoints);
  $index: index(map-values($breakpoints), $breakpoint);
  $gridSize: map-get($breakpoint, size);

  .container {
    max-width: $gridSize + px;
  }
};

@function get-breakpoint-by-index($breakpoints, $index) {
  @return nth(map-values($breakpoints), $index);
};

@function get-breakpoint($name, $breakpoints: $defaultBreakpoints) {
  @return map-get(map-get($breakpoints, $name), size);
};

@function calc-grid-max-size($breakpoints) {
  $list: ();

  @each $key, $breakpoint in $breakpoints {
    $list: append($list, map-get($breakpoint, size) + 0, comma);
  };

  @return max($list...);
};

@function calc-gutter-percentage($breakpoints) {
  @return $gridGutter / calc-grid-max-size($breakpoints);
};

