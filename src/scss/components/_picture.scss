/**
  * @parent gaiden_css.components
  * @stylesheet gaiden_css.components.picture.css Picture
  *
**/

/**
  * @styles simple Simple Picture
  *
  * @demo demo/gaiden-css/components/picture/demo.html
  *
**/

/**
  * @styles rounded Rounded
  *
  * @demo demo/gaiden-css/components/picture/rounded.html
**/

/**
  * @styles enveloped Enveloped
  *
  * @demo demo/gaiden-css/components/picture/enveloped.html
**/

/**
  * @styles cover Cover
  * This sample is a image with the full height and centralized image on picture container. This case simulates the `background-size: cover` without use a image as background.
  * @demo demo/gaiden-css/components/picture/cover.html
**/

.picture {
  max-width: 100%;

  &__image {
    display: block;
    height: auto;
    max-width: 100%;
    background-color: get-color(air);
  }

  &--rounded {
    .picture__image {
      border-radius: 50%;
    }
  }

  &--cover {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    overflow: hidden;
    content: '';
    z-index: 2;

    .picture__image {
      -moz-force-broken-image-icon: 1; //sass-lint:disable-line no-misspelled-properties
      margin: 0 auto;
      position: absolute;
      right: -9999px;
      left: -9999px;
      min-width: 100%;
      min-height: 100%;
    }
  }

  &--enveloped {
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 80%, 50% 94%, 0 80%);
    clip-path: polygon(0 0, 100% 0, 100% 84%, 50% 100%, 0 84%);

    &::before {
      @include media(small) {
        @include backgrounds(
          (
            (10deg, get-color(air) 10%, transparent 10.2%),
            (-10deg, get-color(air) 10%, transparent 10.2%)
          )
        );
      }
      @include media(medium) {
        @include backgrounds(
          (
            (7deg, get-color(air) 12%, transparent 12.2%),
            (-7deg, get-color(air) 12%, transparent 12.2%)
          )
        );
      }
      @include media(large) {
        @include backgrounds(
          (
            (4deg, get-color(air) 12%, transparent 12.2%),
            (-4deg, get-color(air) 12%, transparent 12.2%)
          )
        );
      }
      @include backgrounds(
        (
          (20deg, get-color(air) 12%, transparent 12.2%),
          (-20deg, get-color(air) 12%, transparent 12.2%)
        )
      );
    }
  }
}
